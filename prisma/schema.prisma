generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String           @id @default(uuid())
  productName String
  description String?
  price       Decimal          @db.Decimal(10, 2)
  sku         String           @unique
  stock       Int              @default(0)
  brandId     String?
  categoryId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      ProductImage[]
  brand       Brand?           @relation(fields: [brandId], references: [id])
  category    Category?        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  orderItems  OrderItem[]
}

model ProductImage {
  id           String          @id @default(uuid())
  productId    String?
  variantId    String?
  filename     String
  filepath     String
  publicUrl    String
  altText      String?
  displayOrder Int             @default(0)
  isPrimary    Boolean         @default(false)
  createdAt    DateTime        @default(now())
  product      Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant      ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id              String         @id @default(uuid())
  productId       String
  size            ClothSize      @default(M)
  color           String?
  stockQuantity   Int            @default(0)
  priceAdjustment Decimal?       @db.Decimal(10, 2)
  sku             String         @unique
  images          ProductImage[]
  product         Product        @relation(fields: [productId], references: [id])
  orderItems      OrderItem[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  parentId    String?
  description String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  shippingAddress String
  billingAddress  String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           OrderItem[]
  user            User          @relation(fields: [userId], references: [id])
}

model OrderItem {
  id          String          @id @default(uuid())
  orderId     String
  productId   String
  variantId   String?
  quantity    Int
  priceAtTime Decimal         @db.Decimal(10, 2)
  order       Order           @relation(fields: [orderId], references: [id])
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
}

model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  name                  String?
  phone                 String?
  role                  UserRole               @default(CUSTOMER)
  addresses             Address[]
  orders                Order[]
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Address {
  id         String      @id @default(uuid())
  userId     String
  type       AddressType
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean     @default(false)
  user       User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ClothSize {
  XS
  S
  M
  L
  XL
  XXL
}
